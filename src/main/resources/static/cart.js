const API_BASE = window.location.origin;
const accessToken = localStorage.getItem("accessToken");

async function loadCart() {
    try {
        const res = await fetch(`${API_BASE}/cart`, {
            headers: {
                "Authorization": `Bearer ${accessToken}`
            }
        });

        const result = await res.json();
        if (res.ok && result.success) {
            const items = result.data.items || [];
            if (items.length === 0) {
                document.getElementById("cartContainer").innerHTML = "<p>üõí Gi·ªè h√†ng tr·ªëng</p>";
                document.getElementById("totalPrice").textContent = "T·ªïng ti·ªÅn: 0‚Ç©";
                return;
            }

            const html = `
    <table>
        <thead>
            <tr>
                <th>·∫¢nh</th>
                <th>Ti√™u ƒë·ªÅ</th>
                <th>Gi√°</th>
                <th>S·ªë l∆∞·ª£ng</th>
                <th>Th√†nh ti·ªÅn</th>
                <th>Thao t√°c</th>
            </tr>
        </thead>
        <tbody>
            ${items.map(item => {
                const hasSale = item.salePrice !== null && item.salePrice < item.price;
                const displayPrice = hasSale
                    ? `<span style="text-decoration: line-through; color: gray;">${item.price.toLocaleString()}‚Ç©</span>
                       <br/><span style="color: red; font-weight: bold;">${item.salePrice.toLocaleString()}‚Ç©</span>`
                    : `${item.price.toLocaleString()}‚Ç©`;

                const unitPrice = hasSale ? item.salePrice : item.price;
                const subtotal = unitPrice * item.quantity;

                return `
                    <tr>
                        <td><img src="${item.imgUrl}" /></td>
                        <td>${item.title}</td>
                        <td>${displayPrice}</td>
                        <td>
                            <input type="number" value="${item.quantity}" min="1"
                                onchange="updateQuantity(${item.bookId}, this.value)" />
                        </td>
                        <td>${subtotal.toLocaleString()}‚Ç©</td>
                        <td class="actions">
                            <button onclick="removeItem(${item.bookId})">‚ùå X√≥a</button>
                        </td>
                    </tr>
                `;
            }).join("")}
        </tbody>
    </table>
`;

            document.getElementById("cartContainer").innerHTML = html;
            document.getElementById("totalPrice").textContent =
                "T·ªïng ti·ªÅn: " + result.data.totalPrice + "‚Ç©";

        } else {
            alert(result.message || "Kh√¥ng th·ªÉ t·∫£i gi·ªè h√†ng");
        }

    } catch (err) {
        alert("L·ªói server: " + err.message);
    }
}

async function updateQuantity(bookId, quantity) {
    try {
        const res = await fetch(`${API_BASE}/cart/items`, {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${accessToken}`
            },
            body: JSON.stringify({
                bookId,
                quantity: parseInt(quantity)
            })
        });

        const result = await res.json();
        if (res.ok && result.success) {
            await loadCart();
        } else {
            alert(result.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t");
        }

    } catch (err) {
        alert("L·ªói: " + err.message);
    }
}
window.updateQuantity=updateQuantity

async function removeItem(bookId) {
    try {
        const res = await fetch(`${API_BASE}/cart/items?bookId=${bookId}`, {
            method: "DELETE",
            headers: {"Authorization": `Bearer ${accessToken}`}
        });

        const result = await res.json();
        if (res.ok && result.success) {
            await loadCart();
        } else {
            alert(result.message || "X√≥a th·∫•t b·∫°i");
        }

    } catch (err) {
        alert("L·ªói: " + err.message);
    }
}
window.removeItem=removeItem

async function clearCart() {
    if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô gi·ªè h√†ng?")) return;

    const res = await fetch(`${API_BASE}/cart`, {
        method: "DELETE",
        headers: {"Authorization": `Bearer ${accessToken}`}
    });
    const result = await res.json();
    if (res.ok && result.success) {
        await loadCart();
    } else {
        alert(result.message || "X√≥a th·∫•t b·∫°i");
    }
}
window.clearCart=clearCart

async function placeOrder() {
    if (!accessToken) return alert("Vui l√≤ng ƒëƒÉng nh·∫≠p");

    const recipientName = document.getElementById("recipientName").value.trim();
    const recipientPhone = document.getElementById("recipientPhone").value.trim();
    const shippingAddress = document.getElementById("shippingAddress").value.trim();
    const note = document.getElementById("note").value.trim();
    const couponCode = document.getElementById("couponCode").value.trim();
    const usePoint = document.getElementById("usePoint").value.trim();

    if (!recipientName || !recipientPhone || !shippingAddress) {
        alert("‚ùó Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin giao h√†ng");
        return;
    }

    const orderRequest = {
        recipientName,
        recipientPhone,
        shippingAddress,
        note,
        couponCode,
        usePoint
    };

    try {
        const res = await fetch(`${API_BASE}/order/checkout`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${accessToken}`
            },
            body: JSON.stringify(orderRequest)
        });

        const result = await res.json();
        if (res.ok && result.success) {
            alert("‚úÖ ƒê·∫∑t h√†ng th√†nh c√¥ng!");
            window.location.href = "order-history.html";
        } else {
            alert("‚ùå " + (result.message || "L·ªói khi ƒë·∫∑t h√†ng"));
        }

    } catch (err) {
        alert("‚ö†Ô∏è L·ªói server: " + err.message);
    }
}
window.placeOrder=placeOrder

async function loadFriends() {
    try {
        const res = await fetch(`${API_BASE}/friend/to-give`, {
            headers: { "Authorization": `Bearer ${accessToken}` }
        });

        const result = await res.json();
        if (res.ok && result.success) {
            const friends = result.data || [];
            const select = document.getElementById("friendSelect");

            friends.forEach((f, idx) => {
                const opt = document.createElement("option");
                opt.value = idx; // l∆∞u index ƒë·ªÉ d·ªÖ l·∫•y object
                opt.textContent = `${f.recipientName} (${f.friendPhone})`;
                select.appendChild(opt);
            });

            window.friendsData = friends;

        } else {
            console.warn("Kh√¥ng c√≥ b·∫°n b√® ƒë·ªÉ t·∫∑ng qu√†");
        }

    } catch (err) {
        console.error("L·ªói khi load b·∫°n b√®:", err);
    }
}

function fillFriendInfo(index) {
    if (index === "") return; // kh√¥ng ch·ªçn g√¨
    const friend = window.friendsData[index];
    if (friend) {
        document.getElementById("recipientName").value = friend.recipientName || "";
        document.getElementById("recipientPhone").value = friend.friendPhone || "";
        document.getElementById("shippingAddress").value = friend.friendAddress || "";
    }
}
window.fillFriendInfo=fillFriendInfo

async function loadSuggestFromCart() {
    try {
        const res = await fetch(`${API_BASE}/book/suggest-from-cart`, {
            headers: { "Authorization": `Bearer ${accessToken}` }
        });

        const result = await res.json();
        let books = [];
        let useRandomId = false; // ƒë√°nh d·∫•u n·∫øu d√πng API random (id kh√°c)

        if (res.ok && result.success) {
            books = result.data || [];
        }

        // N·∫øu kh√¥ng c√≥ s√°ch g·ª£i √Ω t·ª´ cart, g·ªçi API random
        if (!books || books.length === 0) {
            const randomRes = await fetch(`${API_BASE}/book/random?page=0&size=6`, {
                headers: { "Authorization": `Bearer ${accessToken}` }
            });
            const randomResult = await randomRes.json();
            if (randomRes.ok && randomResult.success) {
                books = randomResult.data?.content || [];
                useRandomId = true;
            }
        }

        const suggestContainer = document.getElementById("suggestContainer");
        if (!books || books.length === 0) {
            suggestContainer.innerHTML = "<p>‚ùå Kh√¥ng c√≥ s√°ch g·ª£i √Ω</p>";
            return;
        }

        const html = `
            <div class="suggest-grid">
                ${books.map(b => {
            const idToUse = useRandomId ? b.id : b.bookId;
            return `
                    <div class="suggest-card">
                        <img src="${b.imgUrl}" alt="${b.title}" />
                        <h3>${b.title}</h3>
                        <p>
                            ${b.salePrice && b.salePrice < b.price
                ? `<span style="text-decoration: line-through; color: gray;">
                                    ${b.price.toLocaleString()}‚Ç©
                                  </span>
                                  <br/>
                                  <span style="color: red; font-weight: bold;">
                                    ${b.salePrice.toLocaleString()}‚Ç©
                                  </span>`
                : `${b.price.toLocaleString()}‚Ç©`
            }
                        </p>
                        <button onclick="addToCart(${idToUse})">üõí Th√™m v√†o gi·ªè</button>
                    </div>
                    `;
        }).join("")}
            </div>
        `;
        suggestContainer.innerHTML = html;

    } catch (err) {
        alert("L·ªói server khi t·∫£i g·ª£i √Ω: " + err.message);
    }
}

async function addToCart(bookId, quantity = 1) {
    try {
        const res = await fetch(`${API_BASE}/cart/items`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${accessToken}`
            },
            body: JSON.stringify({
                bookId,
                quantity
            })
        });

        const result = await res.json();
        if (res.ok && result.success) {
            alert("‚úÖ " + result.message);
            await loadCart();
            await loadSuggestFromCart();
        } else {
            alert("‚ùå " + (result.message || "Th√™m s√°ch th·∫•t b·∫°i"));
        }

    } catch (err) {
        alert("‚ö†Ô∏è L·ªói server: " + err.message);
    }
}
window.addToCart = addToCart;

async function loadPoint() {
    try {
        const res = await fetch(`${API_BASE}/points`, {
            headers: { "Authorization": `Bearer ${accessToken}` }
        });

        const result = await res.json();
        if (res.ok && result.success) {
            const point = result.data.point || 0;
            document.getElementById("pointBalance").textContent =
                `‚≠ê ƒêi·ªÉm hi·ªán c√≥: ${point.toLocaleString()} P`;
        } else {
            document.getElementById("pointBalance").textContent = "‚≠ê ƒêi·ªÉm hi·ªán c√≥: 0 P";
        }

    } catch (err) {
        console.error("L·ªói khi load point:", err);
        document.getElementById("pointBalance").textContent = "‚≠ê ƒêi·ªÉm hi·ªán c√≥: 0 P";
    }
}

let currentPointPage = 0;
const pointPageSize = 5;

async function loadPointHistory(page = 0, size = pointPageSize) {
    try {
        const res = await fetch(`${API_BASE}/points/history?page=${page}&size=${size}`, {
            headers: { "Authorization": `Bearer ${accessToken}` }
        });

        const result = await res.json();
        if (res.ok && result.success) {
            const history = result.data.content || [];
            const totalPages = result.data.totalPages;
            currentPointPage = result.data.number;

            if (history.length === 0) {
                document.getElementById("pointHistoryContainer").innerHTML =
                    "<p>‚ùå Ch∆∞a c√≥ l·ªãch s·ª≠ point</p>";
                document.getElementById("pointHistoryPagination").innerHTML = "";
                return;
            }

            // B·∫£ng hi·ªÉn th·ªã l·ªãch s·ª≠
            const html = `
                <table border="1" cellspacing="0" cellpadding="5">
                    <thead>
                        <tr>
                            <th>Th·ªùi gian</th>
                            <th>ƒêi·ªÉm t√≠ch l≈©y</th>
                            <th>ƒêi·ªÉm s·ª≠ d·ª•ng</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${history.map(h => `
                            <tr>
                                <td>${new Date(h.updatedAt).toLocaleString()}</td>
                                <td style="color:green;">${h.pointHoard ? h.pointHoard.toLocaleString() : "-"}</td>
                                <td style="color:red;">${h.pointUsage ? h.pointUsage.toLocaleString() : "-"}</td>
                            </tr>
                        `).join("")}
                    </tbody>
                </table>
            `;
            document.getElementById("pointHistoryContainer").innerHTML = html;

            // N√∫t ph√¢n trang
            let paginationHtml = `
                <button ${currentPointPage === 0 ? "disabled" : ""}
                    onclick="loadPointHistory(${currentPointPage - 1}, ${size})">‚¨Ö Trang tr∆∞·ªõc</button>
                <span>Trang ${currentPointPage + 1} / ${totalPages}</span>
                <button ${currentPointPage >= totalPages - 1 ? "disabled" : ""}
                    onclick="loadPointHistory(${currentPointPage + 1}, ${size})">Trang sau ‚û°</button>
            `;
            document.getElementById("pointHistoryPagination").innerHTML = paginationHtml;

        } else {
            alert(result.message || "Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ point");
        }

    } catch (err) {
        alert("‚ö†Ô∏è L·ªói server khi t·∫£i l·ªãch s·ª≠ point: " + err.message);
    }
}
window.loadPointHistory = loadPointHistory;

async function loadCoupons() {
    try {
        const res = await fetch(`${API_BASE}/coupon/user`, {
            headers: {
                "Authorization": `Bearer ${accessToken}`
            }
        });

        const result = await res.json();
        if (res.ok && result.success) {
            const select = document.getElementById("couponSelect");
            select.innerHTML = `<option value="">-- Ch·ªçn coupon t·ª´ danh s√°ch --</option>`;

            result.data.forEach(coupon => {
                // Hi·ªÉn th·ªã r√µ r√†ng lo·∫°i gi·∫£m
                let displayText = `${coupon.couponCode} - ${coupon.description} (`;
                if (coupon.percentDiscount) {
                    if (coupon.discountPercent && coupon.discountPercent > 0) {
                        displayText += `Gi·∫£m ${coupon.discountPercent}%`;
                    } else {
                        displayText += `Gi·∫£m %`;
                    }
                } else {
                    if (coupon.discountAmount && coupon.discountAmount > 0) {
                        displayText += `Gi·∫£m ${coupon.discountAmount.toLocaleString()}‚Ç©`;
                    } else {
                        displayText += `Gi·∫£m c·ªë ƒë·ªãnh`;
                    }
                }
                displayText += `)`;

                const opt = document.createElement("option");
                opt.value = coupon.couponCode;
                opt.textContent = displayText;
                select.appendChild(opt);
            });
        } else {
            console.warn(result.message || "Kh√¥ng th·ªÉ t·∫£i coupon");
        }
    } catch (err) {
        console.error("L·ªói khi load coupon:", err.message);
    }
}

function applyCoupon(code) {
    document.getElementById("couponCode").value = code;
}
window.applyCoupon = applyCoupon;

window.onload = async () => {
    await loadCart();
    await loadFriends();
    await loadSuggestFromCart();
    await loadPoint();
    await loadCoupons()
};
